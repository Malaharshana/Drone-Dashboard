{"ast":null,"code":"let listeners = [];\nlet intervalId = null;\nlet telemetryStarted = false;\nfunction getRandom(min, max) {\n  return +(Math.random() * (max - min) + min).toFixed(2);\n}\nfunction generateTelemetryData() {\n  return {\n    battery: getRandom(2.5, 4.5),\n    altitude: getRandom(10, 1000),\n    temperature: getRandom(20, 70),\n    roll: getRandom(-45, 45),\n    pitch: getRandom(-45, 45),\n    yaw: getRandom(0, 360),\n    gps: {\n      lat: getRandom(11.0, 11.03),\n      lon: getRandom(76.94, 76.97),\n      alt: getRandom(10, 100)\n    },\n    connection: ['Excellent', 'Good', 'Poor', 'No Signal'][Math.floor(Math.random() * 4)],\n    timestamp: new Date().toISOString()\n  };\n}\n\n// Pre-warm voice engine on load\nconst warmUpVoice = () => {\n  const utterance = new SpeechSynthesisUtterance('initializing');\n  utterance.volume = 0;\n  speechSynthesis.speak(utterance);\n};\nwarmUpVoice();\nconst speak = text => {\n  const utterance = new SpeechSynthesisUtterance(text);\n  utterance.rate = 1;\n  utterance.pitch = 1;\n  utterance.volume = 1;\n  let attempts = 0;\n  const trySpeak = () => {\n    if (!speechSynthesis.speaking) {\n      speechSynthesis.speak(utterance);\n    } else if (attempts < 3) {\n      attempts++;\n      setTimeout(trySpeak, 150);\n    }\n  };\n  trySpeak();\n};\nlet batteryAlertSpoken = false;\nlet connectionAlertSpoken = false;\nfunction startTelemetryInterval() {\n  if (intervalId) clearInterval(intervalId);\n  intervalId = setInterval(() => {\n    const newData = generateTelemetryData();\n    if (!telemetryStarted) telemetryStarted = true;\n\n    // Voice alert logic\n    if (newData.battery < 3.7 && !batteryAlertSpoken) {\n      batteryAlertSpoken = true;\n      speak('Warning. Battery level is critical.');\n    }\n    if (newData.battery >= 3.7 && batteryAlertSpoken) {\n      batteryAlertSpoken = false;\n    }\n    if (newData.connection === 'No Signal' && !connectionAlertSpoken) {\n      connectionAlertSpoken = true;\n      speak('Connection lost.');\n    }\n    if (newData.connection !== 'No Signal' && connectionAlertSpoken) {\n      connectionAlertSpoken = false;\n    }\n    listeners.forEach(cb => cb(newData));\n  }, 3000);\n}\nexport function subscribeToTelemetry(callback) {\n  listeners.push(callback);\n  if (!intervalId) {\n    startTelemetryInterval();\n  }\n  return () => {\n    listeners = listeners.filter(cb => cb !== callback);\n    if (listeners.length === 0 && intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n      telemetryStarted = false;\n    }\n  };\n}\nexport function isTelemetryVoiceReady() {\n  return telemetryStarted;\n}","map":{"version":3,"names":["listeners","intervalId","telemetryStarted","getRandom","min","max","Math","random","toFixed","generateTelemetryData","battery","altitude","temperature","roll","pitch","yaw","gps","lat","lon","alt","connection","floor","timestamp","Date","toISOString","warmUpVoice","utterance","SpeechSynthesisUtterance","volume","speechSynthesis","speak","text","rate","attempts","trySpeak","speaking","setTimeout","batteryAlertSpoken","connectionAlertSpoken","startTelemetryInterval","clearInterval","setInterval","newData","forEach","cb","subscribeToTelemetry","callback","push","filter","length","isTelemetryVoiceReady"],"sources":["D:/DroneTelemetryDashboard/frontend/src/api/socket.js"],"sourcesContent":["let listeners = [];\r\nlet intervalId = null;\r\nlet telemetryStarted = false;\r\n\r\nfunction getRandom(min, max) {\r\n  return +(Math.random() * (max - min) + min).toFixed(2);\r\n}\r\n\r\nfunction generateTelemetryData() {\r\n  return {\r\n    battery: getRandom(2.5, 4.5),\r\n    altitude: getRandom(10, 1000),\r\n    temperature: getRandom(20, 70),\r\n    roll: getRandom(-45, 45),\r\n    pitch: getRandom(-45, 45),\r\n    yaw: getRandom(0, 360),\r\n    gps: {\r\n      lat: getRandom(11.0, 11.03),\r\n      lon: getRandom(76.94, 76.97),\r\n      alt: getRandom(10, 100),\r\n    },\r\n    connection: ['Excellent', 'Good', 'Poor', 'No Signal'][\r\n      Math.floor(Math.random() * 4)\r\n    ],\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n}\r\n\r\n// Pre-warm voice engine on load\r\nconst warmUpVoice = () => {\r\n  const utterance = new SpeechSynthesisUtterance('initializing');\r\n  utterance.volume = 0;\r\n  speechSynthesis.speak(utterance);\r\n};\r\n\r\nwarmUpVoice();\r\n\r\nconst speak = (text) => {\r\n  const utterance = new SpeechSynthesisUtterance(text);\r\n  utterance.rate = 1;\r\n  utterance.pitch = 1;\r\n  utterance.volume = 1;\r\n\r\n  let attempts = 0;\r\n  const trySpeak = () => {\r\n    if (!speechSynthesis.speaking) {\r\n      speechSynthesis.speak(utterance);\r\n    } else if (attempts < 3) {\r\n      attempts++;\r\n      setTimeout(trySpeak, 150);\r\n    }\r\n  };\r\n\r\n  trySpeak();\r\n};\r\n\r\nlet batteryAlertSpoken = false;\r\nlet connectionAlertSpoken = false;\r\n\r\nfunction startTelemetryInterval() {\r\n  if (intervalId) clearInterval(intervalId);\r\n\r\n  intervalId = setInterval(() => {\r\n    const newData = generateTelemetryData();\r\n\r\n    if (!telemetryStarted) telemetryStarted = true;\r\n\r\n    // Voice alert logic\r\n    if (newData.battery < 3.7 && !batteryAlertSpoken) {\r\n      batteryAlertSpoken = true;\r\n      speak('Warning. Battery level is critical.');\r\n    }\r\n    if (newData.battery >= 3.7 && batteryAlertSpoken) {\r\n      batteryAlertSpoken = false;\r\n    }\r\n\r\n    if (newData.connection === 'No Signal' && !connectionAlertSpoken) {\r\n      connectionAlertSpoken = true;\r\n      speak('Connection lost.');\r\n    }\r\n    if (newData.connection !== 'No Signal' && connectionAlertSpoken) {\r\n      connectionAlertSpoken = false;\r\n    }\r\n\r\n    listeners.forEach((cb) => cb(newData));\r\n  }, 3000);\r\n}\r\n\r\nexport function subscribeToTelemetry(callback) {\r\n  listeners.push(callback);\r\n\r\n  if (!intervalId) {\r\n    startTelemetryInterval();\r\n  }\r\n\r\n  return () => {\r\n    listeners = listeners.filter((cb) => cb !== callback);\r\n\r\n    if (listeners.length === 0 && intervalId) {\r\n      clearInterval(intervalId);\r\n      intervalId = null;\r\n      telemetryStarted = false;\r\n    }\r\n  };\r\n}\r\n\r\nexport function isTelemetryVoiceReady() {\r\n  return telemetryStarted;\r\n}"],"mappings":"AAAA,IAAIA,SAAS,GAAG,EAAE;AAClB,IAAIC,UAAU,GAAG,IAAI;AACrB,IAAIC,gBAAgB,GAAG,KAAK;AAE5B,SAASC,SAASA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC3B,OAAO,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIF,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG,EAAEI,OAAO,CAAC,CAAC,CAAC;AACxD;AAEA,SAASC,qBAAqBA,CAAA,EAAG;EAC/B,OAAO;IACLC,OAAO,EAAEP,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC;IAC5BQ,QAAQ,EAAER,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC;IAC7BS,WAAW,EAAET,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;IAC9BU,IAAI,EAAEV,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;IACxBW,KAAK,EAAEX,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;IACzBY,GAAG,EAAEZ,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;IACtBa,GAAG,EAAE;MACHC,GAAG,EAAEd,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;MAC3Be,GAAG,EAAEf,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC;MAC5BgB,GAAG,EAAEhB,SAAS,CAAC,EAAE,EAAE,GAAG;IACxB,CAAC;IACDiB,UAAU,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CACpDd,IAAI,CAACe,KAAK,CAACf,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAC9B;IACDe,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH;;AAEA;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAAC,cAAc,CAAC;EAC9DD,SAAS,CAACE,MAAM,GAAG,CAAC;EACpBC,eAAe,CAACC,KAAK,CAACJ,SAAS,CAAC;AAClC,CAAC;AAEDD,WAAW,CAAC,CAAC;AAEb,MAAMK,KAAK,GAAIC,IAAI,IAAK;EACtB,MAAML,SAAS,GAAG,IAAIC,wBAAwB,CAACI,IAAI,CAAC;EACpDL,SAAS,CAACM,IAAI,GAAG,CAAC;EAClBN,SAAS,CAACZ,KAAK,GAAG,CAAC;EACnBY,SAAS,CAACE,MAAM,GAAG,CAAC;EAEpB,IAAIK,QAAQ,GAAG,CAAC;EAChB,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrB,IAAI,CAACL,eAAe,CAACM,QAAQ,EAAE;MAC7BN,eAAe,CAACC,KAAK,CAACJ,SAAS,CAAC;IAClC,CAAC,MAAM,IAAIO,QAAQ,GAAG,CAAC,EAAE;MACvBA,QAAQ,EAAE;MACVG,UAAU,CAACF,QAAQ,EAAE,GAAG,CAAC;IAC3B;EACF,CAAC;EAEDA,QAAQ,CAAC,CAAC;AACZ,CAAC;AAED,IAAIG,kBAAkB,GAAG,KAAK;AAC9B,IAAIC,qBAAqB,GAAG,KAAK;AAEjC,SAASC,sBAAsBA,CAAA,EAAG;EAChC,IAAItC,UAAU,EAAEuC,aAAa,CAACvC,UAAU,CAAC;EAEzCA,UAAU,GAAGwC,WAAW,CAAC,MAAM;IAC7B,MAAMC,OAAO,GAAGjC,qBAAqB,CAAC,CAAC;IAEvC,IAAI,CAACP,gBAAgB,EAAEA,gBAAgB,GAAG,IAAI;;IAE9C;IACA,IAAIwC,OAAO,CAAChC,OAAO,GAAG,GAAG,IAAI,CAAC2B,kBAAkB,EAAE;MAChDA,kBAAkB,GAAG,IAAI;MACzBP,KAAK,CAAC,qCAAqC,CAAC;IAC9C;IACA,IAAIY,OAAO,CAAChC,OAAO,IAAI,GAAG,IAAI2B,kBAAkB,EAAE;MAChDA,kBAAkB,GAAG,KAAK;IAC5B;IAEA,IAAIK,OAAO,CAACtB,UAAU,KAAK,WAAW,IAAI,CAACkB,qBAAqB,EAAE;MAChEA,qBAAqB,GAAG,IAAI;MAC5BR,KAAK,CAAC,kBAAkB,CAAC;IAC3B;IACA,IAAIY,OAAO,CAACtB,UAAU,KAAK,WAAW,IAAIkB,qBAAqB,EAAE;MAC/DA,qBAAqB,GAAG,KAAK;IAC/B;IAEAtC,SAAS,CAAC2C,OAAO,CAAEC,EAAE,IAAKA,EAAE,CAACF,OAAO,CAAC,CAAC;EACxC,CAAC,EAAE,IAAI,CAAC;AACV;AAEA,OAAO,SAASG,oBAAoBA,CAACC,QAAQ,EAAE;EAC7C9C,SAAS,CAAC+C,IAAI,CAACD,QAAQ,CAAC;EAExB,IAAI,CAAC7C,UAAU,EAAE;IACfsC,sBAAsB,CAAC,CAAC;EAC1B;EAEA,OAAO,MAAM;IACXvC,SAAS,GAAGA,SAAS,CAACgD,MAAM,CAAEJ,EAAE,IAAKA,EAAE,KAAKE,QAAQ,CAAC;IAErD,IAAI9C,SAAS,CAACiD,MAAM,KAAK,CAAC,IAAIhD,UAAU,EAAE;MACxCuC,aAAa,CAACvC,UAAU,CAAC;MACzBA,UAAU,GAAG,IAAI;MACjBC,gBAAgB,GAAG,KAAK;IAC1B;EACF,CAAC;AACH;AAEA,OAAO,SAASgD,qBAAqBA,CAAA,EAAG;EACtC,OAAOhD,gBAAgB;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}