{"ast":null,"code":"var _jsxFileName = \"D:\\\\DroneTelemetryDashboard\\\\frontend\\\\src\\\\components\\\\BootScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './BootScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bootLines = ['Initializing Drone Command HQ...', 'Powering up sensors...', 'Loading Telemetry Core...', 'Establishing satellite uplink...', 'Activating visual interface...', 'System check complete...', 'Welcome, Commander.'];\nconst BootScreen = ({\n  onComplete\n}) => {\n  _s();\n  const [displayedLines, setDisplayedLines] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const audioRef = useRef(null);\n  useEffect(() => {\n    audioRef.current = new Audio('/sounds/boot.mp3');\n    audioRef.current.volume = 0.6;\n    const showNext = () => {\n      if (currentIndex < bootLines.length) {\n        setDisplayedLines(prev => [...prev, bootLines[currentIndex]]);\n        setCurrentIndex(prev => prev + 1);\n      }\n    };\n    const interval = setInterval(() => {\n      showNext();\n    }, 2000); // 2s per line\n\n    if (currentIndex === bootLines.length) {\n      clearInterval(interval);\n      setTimeout(() => {\n        audioRef.current.play().catch(err => console.warn('Autoplay blocked:', err));\n        setTimeout(onComplete, 1000); // Wait for 1s audio to finish\n      }, 1000);\n    }\n    return () => clearInterval(interval);\n  }, [currentIndex, onComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"boot-screen\",\n    children: displayedLines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boot-line glitch\",\n      \"data-text\": line,\n      children: line\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(BootScreen, \"KR3BEllgeEhghBMp3nUlXE0GbqY=\");\n_c = BootScreen;\nexport default BootScreen;\nvar _c;\n$RefreshReg$(_c, \"BootScreen\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","bootLines","BootScreen","onComplete","_s","displayedLines","setDisplayedLines","currentIndex","setCurrentIndex","audioRef","current","Audio","volume","showNext","length","prev","interval","setInterval","clearInterval","setTimeout","play","catch","err","console","warn","className","children","map","line","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DroneTelemetryDashboard/frontend/src/components/BootScreen.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './BootScreen.css';\r\n\r\nconst bootLines = [\r\n  'Initializing Drone Command HQ...',\r\n  'Powering up sensors...',\r\n  'Loading Telemetry Core...',\r\n  'Establishing satellite uplink...',\r\n  'Activating visual interface...',\r\n  'System check complete...',\r\n  'Welcome, Commander.',\r\n];\r\n\r\nconst BootScreen = ({ onComplete }) => {\r\n  const [displayedLines, setDisplayedLines] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const audioRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    audioRef.current = new Audio('/sounds/boot.mp3');\r\n    audioRef.current.volume = 0.6;\r\n\r\n    const showNext = () => {\r\n      if (currentIndex < bootLines.length) {\r\n        setDisplayedLines((prev) => [...prev, bootLines[currentIndex]]);\r\n        setCurrentIndex((prev) => prev + 1);\r\n      }\r\n    };\r\n\r\n    const interval = setInterval(() => {\r\n      showNext();\r\n    }, 2000); // 2s per line\r\n\r\n    if (currentIndex === bootLines.length) {\r\n      clearInterval(interval);\r\n      setTimeout(() => {\r\n        audioRef.current.play().catch((err) => console.warn('Autoplay blocked:', err));\r\n        setTimeout(onComplete, 1000); // Wait for 1s audio to finish\r\n      }, 1000);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n  }, [currentIndex, onComplete]);\r\n\r\n  return (\r\n    <div className=\"boot-screen\">\r\n      {displayedLines.map((line, index) => (\r\n        <div key={index} className=\"boot-line glitch\" data-text={line}>\r\n          {line}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BootScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAG,CAChB,kCAAkC,EAClC,wBAAwB,EACxB,2BAA2B,EAC3B,kCAAkC,EAClC,gCAAgC,EAChC,0BAA0B,EAC1B,qBAAqB,CACtB;AAED,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAMY,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAE7BF,SAAS,CAAC,MAAM;IACda,QAAQ,CAACC,OAAO,GAAG,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IAChDF,QAAQ,CAACC,OAAO,CAACE,MAAM,GAAG,GAAG;IAE7B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;MACrB,IAAIN,YAAY,GAAGN,SAAS,CAACa,MAAM,EAAE;QACnCR,iBAAiB,CAAES,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEd,SAAS,CAACM,YAAY,CAAC,CAAC,CAAC;QAC/DC,eAAe,CAAEO,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;MACrC;IACF,CAAC;IAED,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCJ,QAAQ,CAAC,CAAC;IACZ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,IAAIN,YAAY,KAAKN,SAAS,CAACa,MAAM,EAAE;MACrCI,aAAa,CAACF,QAAQ,CAAC;MACvBG,UAAU,CAAC,MAAM;QACfV,QAAQ,CAACC,OAAO,CAACU,IAAI,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,IAAI,CAAC,mBAAmB,EAAEF,GAAG,CAAC,CAAC;QAC9EH,UAAU,CAAChB,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;MAChC,CAAC,EAAE,IAAI,CAAC;IACV;IAEA,OAAO,MAAMe,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACT,YAAY,EAAEJ,UAAU,CAAC,CAAC;EAE9B,oBACEH,OAAA;IAAKyB,SAAS,EAAC,aAAa;IAAAC,QAAA,EACzBrB,cAAc,CAACsB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC9B7B,OAAA;MAAiByB,SAAS,EAAC,kBAAkB;MAAC,aAAWG,IAAK;MAAAF,QAAA,EAC3DE;IAAI,GADGC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAxCIF,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AA0ChB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}