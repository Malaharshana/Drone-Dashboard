{"ast":null,"code":"let listeners = [];\nfunction getRandom(min, max) {\n  return +(Math.random() * (max - min) + min).toFixed(2);\n}\nfunction generateTelemetryData() {\n  return {\n    battery: getRandom(7, 12),\n    // Volts\n    altitude: getRandom(10, 100),\n    // Meters\n    temperature: getRandom(20, 70),\n    // Celsius\n    roll: getRandom(-45, 45),\n    // Degrees\n    pitch: getRandom(-45, 45),\n    yaw: getRandom(0, 360),\n    gps: {\n      lat: getRandom(12.97, 12.99),\n      // Example: Bangalore-ish\n      lon: getRandom(77.59, 77.61),\n      alt: getRandom(10, 100)\n    },\n    connection: [\"Excellent\", \"Good\", \"Poor\", \"No Signal\"][Math.floor(Math.random() * 4)],\n    timestamp: new Date().toISOString()\n  };\n}\nfunction sendTelemetryData() {\n  const newData = generateTelemetryData();\n  listeners.forEach(cb => cb(newData));\n}\nsetInterval(() => {\n  sendTelemetryData();\n}, 7000); // Change to 7 seconds (7000 ms)\n\nexport function subscribeToTelemetry(callback) {\n  listeners.push(callback);\n  return () => {\n    listeners = listeners.filter(cb => cb !== callback);\n  };\n}","map":{"version":3,"names":["listeners","getRandom","min","max","Math","random","toFixed","generateTelemetryData","battery","altitude","temperature","roll","pitch","yaw","gps","lat","lon","alt","connection","floor","timestamp","Date","toISOString","sendTelemetryData","newData","forEach","cb","setInterval","subscribeToTelemetry","callback","push","filter"],"sources":["D:/DroneTelemetryDashboard/frontend/src/api/socket.js"],"sourcesContent":["let listeners = [];\r\n\r\nfunction getRandom(min, max) {\r\n  return +(Math.random() * (max - min) + min).toFixed(2);\r\n}\r\n\r\nfunction generateTelemetryData() {\r\n  return {\r\n    battery: getRandom(7, 12),           // Volts\r\n    altitude: getRandom(10, 100),        // Meters\r\n    temperature: getRandom(20, 70),      // Celsius\r\n    roll: getRandom(-45, 45),            // Degrees\r\n    pitch: getRandom(-45, 45),\r\n    yaw: getRandom(0, 360),\r\n    gps: {\r\n      lat: getRandom(12.97, 12.99),      // Example: Bangalore-ish\r\n      lon: getRandom(77.59, 77.61),\r\n      alt: getRandom(10, 100)\r\n    },\r\n    connection: [\"Excellent\", \"Good\", \"Poor\", \"No Signal\"][\r\n      Math.floor(Math.random() * 4)\r\n    ],\r\n    timestamp: new Date().toISOString()\r\n  };\r\n}\r\n\r\nfunction sendTelemetryData() {\r\n  const newData = generateTelemetryData();\r\n  listeners.forEach((cb) => cb(newData));\r\n}\r\n\r\nsetInterval(() => {\r\n  sendTelemetryData();\r\n}, 7000); // Change to 7 seconds (7000 ms)\r\n\r\nexport function subscribeToTelemetry(callback) {\r\n  listeners.push(callback);\r\n\r\n  return () => {\r\n    listeners = listeners.filter((cb) => cb !== callback);\r\n  };\r\n}\r\n"],"mappings":"AAAA,IAAIA,SAAS,GAAG,EAAE;AAElB,SAASC,SAASA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC3B,OAAO,CAAC,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIF,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG,EAAEI,OAAO,CAAC,CAAC,CAAC;AACxD;AAEA,SAASC,qBAAqBA,CAAA,EAAG;EAC/B,OAAO;IACLC,OAAO,EAAEP,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAAY;IACrCQ,QAAQ,EAAER,SAAS,CAAC,EAAE,EAAE,GAAG,CAAC;IAAS;IACrCS,WAAW,EAAET,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC;IAAO;IACrCU,IAAI,EAAEV,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;IAAa;IACrCW,KAAK,EAAEX,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;IACzBY,GAAG,EAAEZ,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;IACtBa,GAAG,EAAE;MACHC,GAAG,EAAEd,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC;MAAO;MACnCe,GAAG,EAAEf,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC;MAC5BgB,GAAG,EAAEhB,SAAS,CAAC,EAAE,EAAE,GAAG;IACxB,CAAC;IACDiB,UAAU,EAAE,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CACpDd,IAAI,CAACe,KAAK,CAACf,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAC9B;IACDe,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;AACH;AAEA,SAASC,iBAAiBA,CAAA,EAAG;EAC3B,MAAMC,OAAO,GAAGjB,qBAAqB,CAAC,CAAC;EACvCP,SAAS,CAACyB,OAAO,CAAEC,EAAE,IAAKA,EAAE,CAACF,OAAO,CAAC,CAAC;AACxC;AAEAG,WAAW,CAAC,MAAM;EAChBJ,iBAAiB,CAAC,CAAC;AACrB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;AAEV,OAAO,SAASK,oBAAoBA,CAACC,QAAQ,EAAE;EAC7C7B,SAAS,CAAC8B,IAAI,CAACD,QAAQ,CAAC;EAExB,OAAO,MAAM;IACX7B,SAAS,GAAGA,SAAS,CAAC+B,MAAM,CAAEL,EAAE,IAAKA,EAAE,KAAKG,QAAQ,CAAC;EACvD,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}