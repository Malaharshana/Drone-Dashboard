{"ast":null,"code":"var _jsxFileName = \"D:\\\\DroneTelemetryDashboard\\\\frontend\\\\src\\\\components\\\\BootScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './BootScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bootLines = ['Initializing Drone Command HQ...', 'Powering up sensors...', 'Loading Telemetry Core...', 'Establishing satellite uplink...', 'Activating visual interface...', 'System check complete...', 'Welcome, Commander.'];\nconst BootScreen = ({\n  onComplete\n}) => {\n  _s();\n  const [displayedLines, setDisplayedLines] = useState([]);\n  const audioRef = useRef(null);\n  const indexRef = useRef(0); // useRef to track index without re-rendering\n\n  useEffect(() => {\n    audioRef.current = new Audio('/sounds/boot.mp3');\n    audioRef.current.volume = 0.6;\n    const interval = setInterval(() => {\n      if (indexRef.current < bootLines.length) {\n        setDisplayedLines(prev => [...prev, bootLines[indexRef.current]]);\n        indexRef.current += 1;\n      } else {\n        clearInterval(interval);\n        setTimeout(() => {\n          audioRef.current.play().catch(err => console.warn('Autoplay blocked:', err));\n          setTimeout(onComplete, 1000); // Wait for sound, then continue\n        }, 1000);\n      }\n    }, 2000); // Show each line every 2 seconds\n\n    return () => clearInterval(interval);\n  }, [onComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"boot-screen\",\n    children: displayedLines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boot-line glitch\",\n      \"data-text\": line,\n      children: line\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(BootScreen, \"01MiQ75noobB6VqbKJXL/sBYaqo=\");\n_c = BootScreen;\nexport default BootScreen;\nvar _c;\n$RefreshReg$(_c, \"BootScreen\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","bootLines","BootScreen","onComplete","_s","displayedLines","setDisplayedLines","audioRef","indexRef","current","Audio","volume","interval","setInterval","length","prev","clearInterval","setTimeout","play","catch","err","console","warn","className","children","map","line","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DroneTelemetryDashboard/frontend/src/components/BootScreen.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './BootScreen.css';\n\nconst bootLines = [\n  'Initializing Drone Command HQ...',\n  'Powering up sensors...',\n  'Loading Telemetry Core...',\n  'Establishing satellite uplink...',\n  'Activating visual interface...',\n  'System check complete...',\n  'Welcome, Commander.',\n];\n\nconst BootScreen = ({ onComplete }) => {\n  const [displayedLines, setDisplayedLines] = useState([]);\n  const audioRef = useRef(null);\n  const indexRef = useRef(0); // useRef to track index without re-rendering\n\n  useEffect(() => {\n    audioRef.current = new Audio('/sounds/boot.mp3');\n    audioRef.current.volume = 0.6;\n\n    const interval = setInterval(() => {\n      if (indexRef.current < bootLines.length) {\n        setDisplayedLines((prev) => [...prev, bootLines[indexRef.current]]);\n        indexRef.current += 1;\n      } else {\n        clearInterval(interval);\n        setTimeout(() => {\n          audioRef.current.play().catch((err) => console.warn('Autoplay blocked:', err));\n          setTimeout(onComplete, 1000); // Wait for sound, then continue\n        }, 1000);\n      }\n    }, 2000); // Show each line every 2 seconds\n\n    return () => clearInterval(interval);\n  }, [onComplete]);\n\n  return (\n    <div className=\"boot-screen\">\n      {displayedLines.map((line, index) => (\n        <div key={index} className=\"boot-line glitch\" data-text={line}>\n          {line}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default BootScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAG,CAChB,kCAAkC,EAClC,wBAAwB,EACxB,2BAA2B,EAC3B,kCAAkC,EAClC,gCAAgC,EAChC,0BAA0B,EAC1B,qBAAqB,CACtB;AAED,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAMU,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMU,QAAQ,GAAGV,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE5BF,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACE,OAAO,GAAG,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IAChDH,QAAQ,CAACE,OAAO,CAACE,MAAM,GAAG,GAAG;IAE7B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjC,IAAIL,QAAQ,CAACC,OAAO,GAAGR,SAAS,CAACa,MAAM,EAAE;QACvCR,iBAAiB,CAAES,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEd,SAAS,CAACO,QAAQ,CAACC,OAAO,CAAC,CAAC,CAAC;QACnED,QAAQ,CAACC,OAAO,IAAI,CAAC;MACvB,CAAC,MAAM;QACLO,aAAa,CAACJ,QAAQ,CAAC;QACvBK,UAAU,CAAC,MAAM;UACfV,QAAQ,CAACE,OAAO,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,IAAI,CAAC,mBAAmB,EAAEF,GAAG,CAAC,CAAC;UAC9EH,UAAU,CAACd,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;QAChC,CAAC,EAAE,IAAI,CAAC;MACV;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMa,aAAa,CAACJ,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACT,UAAU,CAAC,CAAC;EAEhB,oBACEH,OAAA;IAAKuB,SAAS,EAAC,aAAa;IAAAC,QAAA,EACzBnB,cAAc,CAACoB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC9B3B,OAAA;MAAiBuB,SAAS,EAAC,kBAAkB;MAAC,aAAWG,IAAK;MAAAF,QAAA,EAC3DE;IAAI,GADGC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAlCIF,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AAoChB,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}