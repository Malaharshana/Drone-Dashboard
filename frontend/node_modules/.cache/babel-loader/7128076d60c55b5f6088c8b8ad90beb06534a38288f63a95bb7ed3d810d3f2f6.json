{"ast":null,"code":"var _jsxFileName = \"D:\\\\DroneTelemetryDashboard\\\\frontend\\\\src\\\\components\\\\BootScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bootSequence = ['Initializing Drone Command HQ...', 'Powering up sensors...', 'Loading Telemetry Core...', 'Establishing satellite uplink...', 'Activating visual interface...', 'System check complete...', 'Welcome, Commander.'];\nconst BootScreen = ({\n  onComplete\n}) => {\n  _s();\n  const [allLinesDone, setAllLinesDone] = useState(false);\n  useEffect(() => {\n    const delayPerLine = 500; // ms\n    const totalLineDuration = bootSequence.length * delayPerLine;\n    const transitionTimer = setTimeout(() => {\n      setAllLinesDone(true);\n      const audio = new Audio('/sounds/boot.mp3');\n      audio.volume = 0.7;\n      audio.play().catch(err => console.error('Autoplay blocked:', err));\n      setTimeout(() => {\n        onComplete();\n      }, 1000);\n    }, totalLineDuration + 1000);\n    return () => clearTimeout(transitionTimer);\n  }, [onComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: 'black',\n      color: '#00ffe0',\n      fontFamily: 'Orbitron, monospace',\n      fontSize: '1.2rem',\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      paddingLeft: '5vw'\n    },\n    children: [bootSequence.map((line, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0,\n        x: -50\n      },\n      animate: {\n        opacity: 1,\n        x: 0\n      },\n      transition: {\n        delay: index * 0.5,\n        duration: 0.4\n      },\n      style: {\n        marginBottom: '0.8rem',\n        textShadow: '0 0 8px cyan'\n      },\n      children: line\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)), allLinesDone && /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      transition: {\n        duration: 1\n      },\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100vw',\n        height: '100vh',\n        backgroundColor: 'black',\n        zIndex: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(BootScreen, \"UY6IGdr/jRndWK7XBbSdCWmLxAA=\");\n_c = BootScreen;\nexport default BootScreen;\nvar _c;\n$RefreshReg$(_c, \"BootScreen\");","map":{"version":3,"names":["React","useEffect","useState","motion","jsxDEV","_jsxDEV","bootSequence","BootScreen","onComplete","_s","allLinesDone","setAllLinesDone","delayPerLine","totalLineDuration","length","transitionTimer","setTimeout","audio","Audio","volume","play","catch","err","console","error","clearTimeout","style","backgroundColor","color","fontFamily","fontSize","height","display","flexDirection","justifyContent","paddingLeft","children","map","line","index","div","initial","opacity","x","animate","transition","delay","duration","marginBottom","textShadow","fileName","_jsxFileName","lineNumber","columnNumber","position","top","left","width","zIndex","_c","$RefreshReg$"],"sources":["D:/DroneTelemetryDashboard/frontend/src/components/BootScreen.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\n\nconst bootSequence = [\n  'Initializing Drone Command HQ...',\n  'Powering up sensors...',\n  'Loading Telemetry Core...',\n  'Establishing satellite uplink...',\n  'Activating visual interface...',\n  'System check complete...',\n  'Welcome, Commander.',\n\n];\n\nconst BootScreen = ({ onComplete }) => {\n  const [allLinesDone, setAllLinesDone] = useState(false);\n\n  useEffect(() => {\n    const delayPerLine = 500; // ms\nconst totalLineDuration = bootSequence.length * delayPerLine;\n\nconst transitionTimer = setTimeout(() => {\n  setAllLinesDone(true);\n  const audio = new Audio('/sounds/boot.mp3');\n  audio.volume = 0.7;\n  audio.play().catch(err => console.error('Autoplay blocked:', err));\n\n  setTimeout(() => {\n    onComplete();\n  }, 1000);\n}, totalLineDuration + 1000);\n\n    return () => clearTimeout(transitionTimer);\n  }, [onComplete]);\n\n  return (\n    <div\n      style={{\n        backgroundColor: 'black',\n        color: '#00ffe0',\n        fontFamily: 'Orbitron, monospace',\n        fontSize: '1.2rem',\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        paddingLeft: '5vw',\n      }}\n    >\n      {bootSequence.map((line, index) => (\n        <motion.div\n          key={index}\n          initial={{ opacity: 0, x: -50 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: index * 0.5, duration: 0.4 }}\n          style={{ marginBottom: '0.8rem', textShadow: '0 0 8px cyan' }}\n        >\n          {line}\n        </motion.div>\n      ))}\n\n      {/* Optional: Fade-out screen during transition */}\n      {allLinesDone && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{ duration: 1 }}\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'black',\n            zIndex: 10,\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default BootScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}