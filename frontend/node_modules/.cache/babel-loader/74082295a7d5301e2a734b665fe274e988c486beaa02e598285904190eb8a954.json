{"ast":null,"code":"var _jsxFileName = \"D:\\\\DroneTelemetryDashboard\\\\frontend\\\\src\\\\components\\\\BootScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport './BootScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bootSequence = ['Initializing Drone Command HQ...', 'Powering up sensors...', 'Loading Telemetry Core...', 'Establishing satellite uplink...', 'Activating visual interface...', 'System check complete...', 'Welcome, Commander.'];\nconst BootScreen = ({\n  onComplete\n}) => {\n  _s();\n  const [lines, setLines] = useState([]);\n  const audioRef = useRef(null);\n  useEffect(() => {\n    audioRef.current = new Audio('/sounds/boot.mp3');\n    audioRef.current.volume = 0.7;\n    audioRef.current.load();\n    let current = 0;\n    const revealNext = () => {\n      if (current < bootSequence.length) {\n        setLines(prev => [...prev, bootSequence[current]]);\n        current++;\n        setTimeout(revealNext, 1600); // Wait for typing animation to finish before next\n      } else {\n        audioRef.current.play().catch(e => console.warn(\"Audio play failed\", e));\n        setTimeout(() => {\n          onComplete();\n        }, 1000); // 1s after audio\n      }\n    };\n    revealNext();\n  }, [onComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"boot-screen\",\n    children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boot-line\",\n      \"data-text\": line,\n      children: line\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(BootScreen, \"fbQtxt1CSD8L1XJs4wVOEwemdwE=\");\n_c = BootScreen;\nexport default BootScreen;\nvar _c;\n$RefreshReg$(_c, \"BootScreen\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","bootSequence","BootScreen","onComplete","_s","lines","setLines","audioRef","current","Audio","volume","load","revealNext","length","prev","setTimeout","play","catch","e","console","warn","className","children","map","line","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DroneTelemetryDashboard/frontend/src/components/BootScreen.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport './BootScreen.css';\r\n\r\nconst bootSequence = [\r\n  'Initializing Drone Command HQ...',\r\n  'Powering up sensors...',\r\n  'Loading Telemetry Core...',\r\n  'Establishing satellite uplink...',\r\n  'Activating visual interface...',\r\n  'System check complete...',\r\n  'Welcome, Commander.',\r\n];\r\n\r\nconst BootScreen = ({ onComplete }) => {\r\n  const [lines, setLines] = useState([]);\r\n  const audioRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    audioRef.current = new Audio('/sounds/boot.mp3');\r\n    audioRef.current.volume = 0.7;\r\n    audioRef.current.load();\r\n\r\n    let current = 0;\r\n\r\n    const revealNext = () => {\r\n      if (current < bootSequence.length) {\r\n        setLines((prev) => [...prev, bootSequence[current]]);\r\n        current++;\r\n        setTimeout(revealNext, 1600); // Wait for typing animation to finish before next\r\n      } else {\r\n        audioRef.current.play().catch((e) => console.warn(\"Audio play failed\", e));\r\n        setTimeout(() => {\r\n          onComplete();\r\n        }, 1000); // 1s after audio\r\n      }\r\n    };\r\n\r\n    revealNext();\r\n\r\n  }, [onComplete]);\r\n\r\n  return (\r\n    <div className=\"boot-screen\">\r\n      {lines.map((line, index) => (\r\n        <div key={index} className=\"boot-line\" data-text={line}>\r\n          {line}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BootScreen;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAG,CACnB,kCAAkC,EAClC,wBAAwB,EACxB,2BAA2B,EAC3B,kCAAkC,EAClC,gCAAgC,EAChC,0BAA0B,EAC1B,qBAAqB,CACtB;AAED,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMU,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE7BF,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACC,OAAO,GAAG,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IAChDF,QAAQ,CAACC,OAAO,CAACE,MAAM,GAAG,GAAG;IAC7BH,QAAQ,CAACC,OAAO,CAACG,IAAI,CAAC,CAAC;IAEvB,IAAIH,OAAO,GAAG,CAAC;IAEf,MAAMI,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAIJ,OAAO,GAAGP,YAAY,CAACY,MAAM,EAAE;QACjCP,QAAQ,CAAEQ,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEb,YAAY,CAACO,OAAO,CAAC,CAAC,CAAC;QACpDA,OAAO,EAAE;QACTO,UAAU,CAACH,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;MAChC,CAAC,MAAM;QACLL,QAAQ,CAACC,OAAO,CAACQ,IAAI,CAAC,CAAC,CAACC,KAAK,CAAEC,CAAC,IAAKC,OAAO,CAACC,IAAI,CAAC,mBAAmB,EAAEF,CAAC,CAAC,CAAC;QAC1EH,UAAU,CAAC,MAAM;UACfZ,UAAU,CAAC,CAAC;QACd,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACZ;IACF,CAAC;IAEDS,UAAU,CAAC,CAAC;EAEd,CAAC,EAAE,CAACT,UAAU,CAAC,CAAC;EAEhB,oBACEH,OAAA;IAAKqB,SAAS,EAAC,aAAa;IAAAC,QAAA,EACzBjB,KAAK,CAACkB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBzB,OAAA;MAAiBqB,SAAS,EAAC,WAAW;MAAC,aAAWG,IAAK;MAAAF,QAAA,EACpDE;IAAI,GADGC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzB,EAAA,CArCIF,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AAuChB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}