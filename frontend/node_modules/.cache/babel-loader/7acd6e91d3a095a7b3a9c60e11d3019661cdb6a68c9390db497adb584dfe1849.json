{"ast":null,"code":"var _jsxFileName = \"D:\\\\DroneTelemetryDashboard\\\\frontend\\\\src\\\\components\\\\BootScreen.jsx\",\n  _s = $RefreshSig$();\n// src/components/BootScreen.js\n\nimport React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport './BootScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bootSequence = ['Initializing Drone Command HQ...', 'Powering up sensors...', 'Loading Telemetry Core...', 'Establishing satellite uplink...', 'Activating visual interface...', 'System check complete...', 'Welcome, Commander.'];\nconst BootScreen = ({\n  onComplete\n}) => {\n  _s();\n  const [currentLine, setCurrentLine] = useState(0);\n  const [typedLines, setTypedLines] = useState([]);\n  useEffect(() => {\n    const typeNextLine = async () => {\n      if (currentLine >= bootSequence.length) {\n        // Wait 2 seconds after final line then continue\n        setTimeout(() => {\n          onComplete();\n        }, 2000);\n        return;\n      }\n      const line = bootSequence[currentLine];\n      let typed = '';\n      for (let i = 0; i < line.length; i++) {\n        typed += line[i];\n        await new Promise(res => setTimeout(res, 30)); // typing speed\n        setTypedLines(prev => {\n          const newLines = [...prev];\n          newLines[currentLine] = typed;\n          return newLines;\n        });\n      }\n      setTimeout(() => {\n        setCurrentLine(prev => prev + 1);\n        setTypedLines(prev => [...prev, '']);\n      }, 400); // delay between lines\n    };\n    typeNextLine();\n  }, [currentLine]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"boot-screen\",\n    children: typedLines.map((line, index) => /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      transition: {\n        duration: 0.4\n      },\n      className: `boot-line flicker ${index === typedLines.length - 1 ? 'typing' : ''}`,\n      children: line\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(BootScreen, \"zrVrC2/VFG4iFuYJ18fVcm1sCTA=\");\n_c = BootScreen;\nexport default BootScreen;\nvar _c;\n$RefreshReg$(_c, \"BootScreen\");","map":{"version":3,"names":["React","useEffect","useState","motion","jsxDEV","_jsxDEV","bootSequence","BootScreen","onComplete","_s","currentLine","setCurrentLine","typedLines","setTypedLines","typeNextLine","length","setTimeout","line","typed","i","Promise","res","prev","newLines","className","children","map","index","div","initial","opacity","animate","transition","duration","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/DroneTelemetryDashboard/frontend/src/components/BootScreen.jsx"],"sourcesContent":["// src/components/BootScreen.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport './BootScreen.css';\r\n\r\nconst bootSequence = [\r\n  'Initializing Drone Command HQ...',\r\n  'Powering up sensors...',\r\n  'Loading Telemetry Core...',\r\n  'Establishing satellite uplink...',\r\n  'Activating visual interface...',\r\n  'System check complete...',\r\n  'Welcome, Commander.',\r\n];\r\n\r\nconst BootScreen = ({ onComplete }) => {\r\n  const [currentLine, setCurrentLine] = useState(0);\r\n  const [typedLines, setTypedLines] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const typeNextLine = async () => {\r\n      if (currentLine >= bootSequence.length) {\r\n        // Wait 2 seconds after final line then continue\r\n        setTimeout(() => {\r\n          onComplete();\r\n        }, 2000);\r\n        return;\r\n      }\r\n\r\n      const line = bootSequence[currentLine];\r\n      let typed = '';\r\n      for (let i = 0; i < line.length; i++) {\r\n        typed += line[i];\r\n        await new Promise((res) => setTimeout(res, 30)); // typing speed\r\n        setTypedLines((prev) => {\r\n          const newLines = [...prev];\r\n          newLines[currentLine] = typed;\r\n          return newLines;\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        setCurrentLine((prev) => prev + 1);\r\n        setTypedLines((prev) => [...prev, '']);\r\n      }, 400); // delay between lines\r\n    };\r\n\r\n    typeNextLine();\r\n  }, [currentLine]);\r\n\r\n  return (\r\n    <div className=\"boot-screen\">\r\n      {typedLines.map((line, index) => (\r\n        <motion.div\r\n          key={index}\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          transition={{ duration: 0.4 }}\r\n          className={`boot-line flicker ${index === typedLines.length - 1 ? 'typing' : ''}`}\r\n        >\r\n          {line}\r\n        </motion.div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BootScreen;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,GAAG,CACnB,kCAAkC,EAClC,wBAAwB,EACxB,2BAA2B,EAC3B,kCAAkC,EAClC,gCAAgC,EAChC,0BAA0B,EAC1B,qBAAqB,CACtB;AAED,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMa,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAIJ,WAAW,IAAIJ,YAAY,CAACS,MAAM,EAAE;QACtC;QACAC,UAAU,CAAC,MAAM;UACfR,UAAU,CAAC,CAAC;QACd,CAAC,EAAE,IAAI,CAAC;QACR;MACF;MAEA,MAAMS,IAAI,GAAGX,YAAY,CAACI,WAAW,CAAC;MACtC,IAAIQ,KAAK,GAAG,EAAE;MACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACF,MAAM,EAAEI,CAAC,EAAE,EAAE;QACpCD,KAAK,IAAID,IAAI,CAACE,CAAC,CAAC;QAChB,MAAM,IAAIC,OAAO,CAAEC,GAAG,IAAKL,UAAU,CAACK,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;QACjDR,aAAa,CAAES,IAAI,IAAK;UACtB,MAAMC,QAAQ,GAAG,CAAC,GAAGD,IAAI,CAAC;UAC1BC,QAAQ,CAACb,WAAW,CAAC,GAAGQ,KAAK;UAC7B,OAAOK,QAAQ;QACjB,CAAC,CAAC;MACJ;MAEAP,UAAU,CAAC,MAAM;QACfL,cAAc,CAAEW,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;QAClCT,aAAa,CAAES,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE,EAAE,CAAC,CAAC;MACxC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX,CAAC;IAEDR,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;EAEjB,oBACEL,OAAA;IAAKmB,SAAS,EAAC,aAAa;IAAAC,QAAA,EACzBb,UAAU,CAACc,GAAG,CAAC,CAACT,IAAI,EAAEU,KAAK,kBAC1BtB,OAAA,CAACF,MAAM,CAACyB,GAAG;MAETC,OAAO,EAAE;QAAEC,OAAO,EAAE;MAAE,CAAE;MACxBC,OAAO,EAAE;QAAED,OAAO,EAAE;MAAE,CAAE;MACxBE,UAAU,EAAE;QAAEC,QAAQ,EAAE;MAAI,CAAE;MAC9BT,SAAS,EAAE,qBAAqBG,KAAK,KAAKf,UAAU,CAACG,MAAM,GAAG,CAAC,GAAG,QAAQ,GAAG,EAAE,EAAG;MAAAU,QAAA,EAEjFR;IAAI,GANAU,KAAK;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOA,CACb;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC5B,EAAA,CAlDIF,UAAU;AAAA+B,EAAA,GAAV/B,UAAU;AAoDhB,eAAeA,UAAU;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}