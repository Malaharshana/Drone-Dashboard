{"ast":null,"code":"let listeners = [];\nlet socket;\nexport function subscribeToTelemetry(callback) {\n  listeners.push(callback);\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    socket = new WebSocket('ws://localhost:8000/ws/telemetry'); // Change if hosted\n\n    socket.onopen = () => {\n      console.log('WebSocket connected');\n    };\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      listeners.forEach(cb => cb(data));\n    };\n    socket.onclose = () => {\n      console.warn('WebSocket disconnected. Retrying in 3s...');\n      setTimeout(() => subscribeToTelemetry(() => {}), 3000); // reconnect\n    };\n    socket.onerror = err => {\n      console.error('WebSocket error:', err);\n      socket.close();\n    };\n  }\n  return () => {\n    listeners = listeners.filter(cb => cb !== callback);\n  };\n}","map":{"version":3,"names":["listeners","socket","subscribeToTelemetry","callback","push","readyState","WebSocket","OPEN","onopen","console","log","onmessage","event","data","JSON","parse","forEach","cb","onclose","warn","setTimeout","onerror","err","error","close","filter"],"sources":["D:/DroneTelemetryDashboard/frontend/src/api/socket.js"],"sourcesContent":["let listeners = [];\r\nlet socket;\r\n\r\nexport function subscribeToTelemetry(callback) {\r\n  listeners.push(callback);\r\n\r\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\r\n    socket = new WebSocket('ws://localhost:8000/ws/telemetry'); // Change if hosted\r\n\r\n    socket.onopen = () => {\r\n      console.log('WebSocket connected');\r\n    };\r\n\r\n    socket.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      listeners.forEach((cb) => cb(data));\r\n    };\r\n\r\n    socket.onclose = () => {\r\n      console.warn('WebSocket disconnected. Retrying in 3s...');\r\n      setTimeout(() => subscribeToTelemetry(() => {}), 3000); // reconnect\r\n    };\r\n\r\n    socket.onerror = (err) => {\r\n      console.error('WebSocket error:', err);\r\n      socket.close();\r\n    };\r\n  }\r\n\r\n  return () => {\r\n    listeners = listeners.filter((cb) => cb !== callback);\r\n  };\r\n}"],"mappings":"AAAA,IAAIA,SAAS,GAAG,EAAE;AAClB,IAAIC,MAAM;AAEV,OAAO,SAASC,oBAAoBA,CAACC,QAAQ,EAAE;EAC7CH,SAAS,CAACI,IAAI,CAACD,QAAQ,CAAC;EAExB,IAAI,CAACF,MAAM,IAAIA,MAAM,CAACI,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;IACnDN,MAAM,GAAG,IAAIK,SAAS,CAAC,kCAAkC,CAAC,CAAC,CAAC;;IAE5DL,MAAM,CAACO,MAAM,GAAG,MAAM;MACpBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAEDT,MAAM,CAACU,SAAS,GAAIC,KAAK,IAAK;MAC5B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;MACnCb,SAAS,CAACgB,OAAO,CAAEC,EAAE,IAAKA,EAAE,CAACJ,IAAI,CAAC,CAAC;IACrC,CAAC;IAEDZ,MAAM,CAACiB,OAAO,GAAG,MAAM;MACrBT,OAAO,CAACU,IAAI,CAAC,2CAA2C,CAAC;MACzDC,UAAU,CAAC,MAAMlB,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC;IAEDD,MAAM,CAACoB,OAAO,GAAIC,GAAG,IAAK;MACxBb,OAAO,CAACc,KAAK,CAAC,kBAAkB,EAAED,GAAG,CAAC;MACtCrB,MAAM,CAACuB,KAAK,CAAC,CAAC;IAChB,CAAC;EACH;EAEA,OAAO,MAAM;IACXxB,SAAS,GAAGA,SAAS,CAACyB,MAAM,CAAER,EAAE,IAAKA,EAAE,KAAKd,QAAQ,CAAC;EACvD,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}