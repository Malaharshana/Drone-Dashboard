{"ast":null,"code":"var _jsxFileName = \"D:\\\\DroneTelemetryDashboard\\\\frontend\\\\src\\\\components\\\\BootScreen.jsx\",\n  _s = $RefreshSig$();\n// src/components/BootScreen.js\n\nimport React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport './BootScreen.css'; // We’ll add flicker CSS here\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst bootSequence = ['Initializing Drone Command HQ...', 'Powering up sensors...', 'Loading Telemetry Core...', 'Establishing satellite uplink...', 'Activating visual interface...', 'System check complete...', 'Welcome, Commander.'];\nconst BootScreen = ({\n  onComplete\n}) => {\n  _s();\n  const [started, setStarted] = useState(false);\n  const [currentLine, setCurrentLine] = useState('');\n  const [lineIndex, setLineIndex] = useState(0);\n  useEffect(() => {\n    let audio;\n    if (started) {\n      audio = new Audio('/sounds/boot.mp3');\n      audio.volume = 0.8;\n      audio.play().catch(err => console.error('Boot sound error:', err));\n    }\n  }, [started]);\n  useEffect(() => {\n    if (!started) return;\n    if (lineIndex >= bootSequence.length) {\n      // Delay before transitioning\n      setTimeout(() => onComplete(), 2000);\n      return;\n    }\n    const line = bootSequence[lineIndex];\n    let charIndex = 0;\n    const typingInterval = setInterval(() => {\n      setCurrentLine(prev => prev + line[charIndex]);\n      charIndex++;\n      if (charIndex >= line.length) {\n        clearInterval(typingInterval);\n        setTimeout(() => {\n          setLineIndex(prev => prev + 1);\n          setCurrentLine('');\n        }, 800);\n      }\n    }, 50);\n    return () => clearInterval(typingInterval);\n  }, [lineIndex, started, onComplete]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => !started && setStarted(true),\n    style: {\n      backgroundColor: 'black',\n      color: '#00ffe0',\n      fontFamily: 'Orbitron, monospace',\n      fontSize: '1.2rem',\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      paddingLeft: '5vw',\n      cursor: started ? 'default' : 'pointer'\n    },\n    children: !started ? /*#__PURE__*/_jsxDEV(motion.div, {\n      initial: {\n        opacity: 0\n      },\n      animate: {\n        opacity: 1\n      },\n      transition: {\n        duration: 1\n      },\n      style: {\n        textShadow: '0 0 8px cyan'\n      },\n      children: \"Tap to Initiate Boot Sequence\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [bootSequence.slice(0, lineIndex).map((line, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"boot-line flicker\",\n        children: line\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"boot-line typing\",\n        children: currentLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(BootScreen, \"Mmd69RppjU4rrymwoYleFtC2WFM=\");\n_c = BootScreen;\nexport default BootScreen;\nvar _c;\n$RefreshReg$(_c, \"BootScreen\");","map":{"version":3,"names":["React","useEffect","useState","motion","jsxDEV","_jsxDEV","Fragment","_Fragment","bootSequence","BootScreen","onComplete","_s","started","setStarted","currentLine","setCurrentLine","lineIndex","setLineIndex","audio","Audio","volume","play","catch","err","console","error","length","setTimeout","line","charIndex","typingInterval","setInterval","prev","clearInterval","onClick","style","backgroundColor","color","fontFamily","fontSize","height","display","flexDirection","justifyContent","paddingLeft","cursor","children","div","initial","opacity","animate","transition","duration","textShadow","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","idx","className","_c","$RefreshReg$"],"sources":["D:/DroneTelemetryDashboard/frontend/src/components/BootScreen.jsx"],"sourcesContent":["// src/components/BootScreen.js\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport './BootScreen.css'; // We’ll add flicker CSS here\r\n\r\nconst bootSequence = [\r\n  'Initializing Drone Command HQ...',\r\n  'Powering up sensors...',\r\n  'Loading Telemetry Core...',\r\n  'Establishing satellite uplink...',\r\n  'Activating visual interface...',\r\n  'System check complete...',\r\n  'Welcome, Commander.',\r\n];\r\n\r\nconst BootScreen = ({ onComplete }) => {\r\n  const [started, setStarted] = useState(false);\r\n  const [currentLine, setCurrentLine] = useState('');\r\n  const [lineIndex, setLineIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let audio;\r\n    if (started) {\r\n      audio = new Audio('/sounds/boot.mp3');\r\n      audio.volume = 0.8;\r\n      audio.play().catch((err) => console.error('Boot sound error:', err));\r\n    }\r\n  }, [started]);\r\n\r\n  useEffect(() => {\r\n    if (!started) return;\r\n\r\n    if (lineIndex >= bootSequence.length) {\r\n      // Delay before transitioning\r\n      setTimeout(() => onComplete(), 2000);\r\n      return;\r\n    }\r\n\r\n    const line = bootSequence[lineIndex];\r\n    let charIndex = 0;\r\n\r\n    const typingInterval = setInterval(() => {\r\n      setCurrentLine((prev) => prev + line[charIndex]);\r\n      charIndex++;\r\n      if (charIndex >= line.length) {\r\n        clearInterval(typingInterval);\r\n        setTimeout(() => {\r\n          setLineIndex((prev) => prev + 1);\r\n          setCurrentLine('');\r\n        }, 800);\r\n      }\r\n    }, 50);\r\n\r\n    return () => clearInterval(typingInterval);\r\n  }, [lineIndex, started, onComplete]);\r\n\r\n  return (\r\n    <div\r\n      onClick={() => !started && setStarted(true)}\r\n      style={{\r\n        backgroundColor: 'black',\r\n        color: '#00ffe0',\r\n        fontFamily: 'Orbitron, monospace',\r\n        fontSize: '1.2rem',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        paddingLeft: '5vw',\r\n        cursor: started ? 'default' : 'pointer',\r\n      }}\r\n    >\r\n      {!started ? (\r\n        <motion.div\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          transition={{ duration: 1 }}\r\n          style={{ textShadow: '0 0 8px cyan' }}\r\n        >\r\n          Tap to Initiate Boot Sequence\r\n        </motion.div>\r\n      ) : (\r\n        <>\r\n          {bootSequence.slice(0, lineIndex).map((line, idx) => (\r\n            <div key={idx} className=\"boot-line flicker\">\r\n              {line}\r\n            </div>\r\n          ))}\r\n          <div className=\"boot-line typing\">{currentLine}</div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BootScreen;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}